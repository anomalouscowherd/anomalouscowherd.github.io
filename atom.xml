<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<?xml-stylesheet type="text/css" href="https://anomalouscowherd.github.io/styles/feed.css"?>


<title type="html">(the Last) StockFighter</title>
<subtitle type="html">A blog about my efforts to defeat the on-line trading game StockFighter</subtitle>
<link rel="alternate" type="text/html" href="https://anomalouscowherd.github.io"/>
<link rel="self" type="application/atom+xml" href="https://anomalouscowherd.github.io/atom.xml"/>
<updated>2016-01-18T16:01:26+01:00</updated>
<author>
<name>StarFighter</name>
<uri>https://anomalouscowherd.github.io</uri>
</author>
<id>https://anomalouscowherd.github.io/</id>
<generator uri="http://nanoblogger.sourceforge.net" version="3.5-RC1">
NanoBlogger
</generator>

<entry>
<title type="html">How to debug encrypted API calls </title>
<author>
<name>StarFighter</name>
</author>
<link rel="alternate" type="text/html" href="https://anomalouscowherd.github.io/archives/2016/01/18/how_to_debug_encrypted_api_calls/index.html"/>

<id>https://anomalouscowherd.github.io/archives/2016/01/18/how_to_debug_encrypted_api_calls/index.html</id>
<published>2016-01-18T15:59:35+01:00</published>
<updated>2016-01-18T15:59:35+01:00</updated>

<content type="xhtml">
<div xmlns="http://www.w3.org/1999/xhtml">
    I am writing this post in the hopes that someone doing a search will find
    useful information on debugging encrypted API calls. <br>
    <br>
    How do you debug a request if the conversation is encrypted?&nbsp; This
    isn't about figuring what version of TLS the server supports.&nbsp; It is
    about the content of the request not being recognized by the API.<br>
    <br>
    My technique is to intercept the conversation between the browser and the
    server and try to duplicate a working request.&nbsp; You have to have a
    functioning example API call to make this work, but in this case we have the
    API docs to work with.&nbsp; The example ruby code for a bid or offer is <a

       title="first-trade.rb"  href="https://starfighter.readme.io/docs/getting-started">here:<br>
      https://starfighter.readme.io/docs/getting-started</a> <br>
    <br>
    The mechanics of this request can be investigated with <a  href="http://sourceforge.net/projects/ngrep/">ngrep:<br>
      http://sourceforge.net/projects/ngrep/</a><br>
    <br>
    This is a tool like tcpdump that produces easy to read network
    captures.&nbsp; Install it like so:<br>
    <br>
    Download it:<br>
    <br>
    <code>[root@sl7-vm ~]# wget
"http://downloads.sourceforge.net/project/ngrep/ngrep/1.45/ngrep-1.45.tar.bz2?r=http%3A%2F%2Fngrep.sourceforge.net%2Fdownload.html&amp;ts=1452879259&amp;use_mirror=netassist"</code><br>
    <br>
    unpack it:<br>
    <br>
    <code>[root@sl7-vm ngrep]# tar xvfj ngrep-1.45.tar.bz2</code><br>
    <br>
    <br>
    Patch it:<br>
    <code>[root@sl7-vm ngrep-1.45]# wget
http://sourceforge.net/p/ngrep/bugs/_discuss/thread/ee4219d2/db82/attachment/patch<br>
      --2016-01-15 18:38:18--&nbsp;
http://sourceforge.net/p/ngrep/bugs/_discuss/thread/ee4219d2/db82/attachment/patch<br>
      Resolving sourceforge.net (sourceforge.net)... 216.34.181.60<br>
      Connecting to sourceforge.net (sourceforge.net)|216.34.181.60|:80...
      connected.<br>
      HTTP request sent, awaiting response... 200 OK<br>
      Length: unspecified [application/octet-stream]<br>
      Saving to: &lsquo;patch&rsquo;<br>
      <br>
      [root@sl7-vm ngrep-1.45]# patch &lt; ./patch<br>
      [root@sl7-vm ngrep-1.45]# autoconf configure.in &gt; configure<br>
    </code><br>
    Install the prerequisites:<br>
    <code>[root@sl7-vm ngrep-1.45]# yum install libpcap-devel</code><br>
    <br>
    Configure it, build it, and install it:<br>
    <code>[root@sl7-vm ngrep-1.45]# ./configure &amp;&amp; make &amp;&amp; make
      install</code><br>
    <br>
    you should see this:<br>
    <br>
    <code>gcc -g -O2 -DLINUX -DHAVE_CONFIG_H&nbsp; -D_BSD_SOURCE=1
      -D__FAVOR_BSD=1&nbsp; -I. -I/usr/include&nbsp; -g -c ngrep.c<br>
      gcc -g -O2 -DLINUX -DHAVE_CONFIG_H&nbsp; -D_BSD_SOURCE=1
      -D__FAVOR_BSD=1&nbsp; -L/usr/lib -s -o ngrep ngrep.o&nbsp;
      regex-0.12/regex.o -lpcap<br>
      ./install-sh -c -m 0755 ngrep&nbsp; ///bin/ngrep<br>
      ./install-sh -c -m 0644 ngrep.8 ///share/man/man8/ngrep.8<br>
    </code><br>
    Got to love that autoconf.&nbsp; Three slashes are better than one.<br>
    <br>
    So what do we do with it?&nbsp; This is the tricky part.&nbsp; You are going
    to need stunnel for this part:<br>
    <code>[root@sl7-vm ~]# yum install stunnel<br>
    </code><br>
    make a certificate:<br>
    <code>[root@sl7-vm mitm]# openssl req -batch -new -x509 -days 365 -nodes
      -out server.pem -keyout server.pem</code><br>
    <br>
    now create a config file that looks like this:<br>
    <br>
    <code>[root@sl7-vm mitm]# cat stunnel-mitm-proxy.conf<br>
      debug = 3<br>
      #foreground = yes<br>
      pid =<br>
      <br>
      [server]<br>
      client = no<br>
      cert= ./server.pem<br>
      accept = 127.0.0.1:443<br>
      connect = 127.0.0.1:4434<br>
      <br>
      [client]<br>
      client = yes<br>
      accept = 127.0.0.1:4434<br>
      connect = api.stockfighter.io:443</code><br>
    <br>
    <br>
    This will create a Man In The Middle proxy server that will permit you to
    inspect traffic that would otherwise be end-to-end encrypted.&nbsp; In order
    to use this proxy server you will need to either change the address you post
    to in your code to 127.0.0.1 or alter the /etc/hosts file like so:<br>
    <code>127.0.0.1 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; pi.stockfighter.io<br>
    </code> <br>
    This looks like something I will forget, so I opted to change my code.<br>
    <br>
    You now need to run the proxy as root:<br>
    <code>stunnel stunnel-mitm-proxy.conf</code><br>
    <br>
    you can now start ngrep like so:<br>
    <code>ngrep -W byline -d lo port 4434</code><br>
    <br>
    This will look like nothing is happening.&nbsp; That is fine just start your
    request in another window:<br>
    <br>
    <code>[starfighter@sl7-vm stockfighter]$ ruby first-trade.rb<br>
    </code><br>
    You should see something like this:<br>
    <br>
    <code>#########<br>
      T 127.0.0.1:43643 -&gt; 127.0.0.1:4434 [AP]<br>
      POST /ob/api/venues/AIDEX/stocks/LPEI/orders HTTP/1.1.<br>
      User-Agent: Wget/1.14 (linux-gnu).<br>
      Accept: */*.<br>
      Host: 127.0.0.1.<br>
      Connection: Keep-Alive.<br>
      Content-Type: application/x-www-form-urlencoded.<br>
      Content-Length: 117.<br>
      X-Starfighter-Authorization: REDACTED.<br>
      .<br>
      <br>
      ##<br>
      T 127.0.0.1:43643 -&gt; 127.0.0.1:4434 [AP]<br>
{"account":"REDACTED","venue":"AIDEX","symbol":"LPEI","price":9000,"qty":100,"direction":"buy","orderType":"limit"}<br>
      ##<br>
      T 127.0.0.1:4434 -&gt; 127.0.0.1:43643 [AP]<br>
      HTTP/1.1 200 OK.<br>
      Server: nginx/1.8.0.<br>
      Date: Wed, 20 Jan 2016 14:59:33 GMT.<br>
      Content-Type: application/json.<br>
      Content-Length: 289.<br>
      Connection: keep-alive.<br>
      Strict-Transport-Security: max-age=31536000; includeSubdomains.<br>
      .<br>
      {<br>
      &nbsp; "ok": true,<br>
      &nbsp; "symbol": "LPEI",<br>
      &nbsp; "venue": "AIDEX",<br>
      &nbsp; "direction": "buy",<br>
      &nbsp; "originalQty": 100,<br>
      &nbsp; "qty": 100,<br>
      &nbsp; "price": 9000,<br>
      &nbsp; "orderType": "limit",<br>
      &nbsp; "id": 6681,<br>
      &nbsp; "account": "REDACTED",<br>
      &nbsp; "ts": "2016-01-20T14:59:11.212784703Z",<br>
      &nbsp; "fills": [],<br>
      &nbsp; "totalFilled": 0,<br>
      &nbsp; "open": true<br>
      }</code><br>
    <br>
    If you are like me, you tried to do the same thing with wget and you saw
    this:<br>
    &nbsp;<code>{"ok":false,"error":"json: cannot unmarshal string into Go value
      of type main.OrderDesc"}</code><br>
    <br>
    This puzzled me for a bit, but read on for a solution.&nbsp; When I ran my
    wget command, using what I thought was the correct syntax&nbsp; from the man
    page for wget, I got this in the ngrep window:<br>
    <code>########<br>
      T 127.0.0.1:43625 -&gt; 127.0.0.1:4434 [AP]<br>
      POST /ob/api/venues/JOGDEX/stocks/PIZ/orders HTTP/1.1.<br>
      User-Agent: Wget/1.14 (linux-gnu).<br>
      Accept: */*.<br>
      Host: 127.0.0.1.<br>
      Connection: Keep-Alive.<br>
      Content-Type: application/x-www-form-urlencoded.<br>
      Content-Length: 94.<br>
      X-Starfighter-Authorization: REDACTED.<br>
      .<br>
      <br>
      ##<br>
      T 127.0.0.1:43625 -&gt; 127.0.0.1:4434 [AP]<br>
"account=REDACTED&amp;venue=JOGDEX&amp;symbol=PIZ&amp;price=5500&amp;qty=100&amp;direction=buy&amp;orderType=limit"<br>
      ##<br>
      T 127.0.0.1:4434 -&gt; 127.0.0.1:43625 [AP]<br>
      HTTP/1.1 404 Not Found.<br>
      Server: nginx/1.8.0.<br>
      Date: Wed, 20 Jan 2016 14:39:38 GMT.<br>
      Content-Type: text/plain; charset=utf-8.<br>
      Content-Length: 62.<br>
      Connection: keep-alive.<br>
      .</code><br>
    <br>
    So I set to work altering my code to look like the functional ruby script:<br>
    <code><br>
      #export base_url="https://api.stockfighter.io/ob/api"<br>
      export base_url="https://127.0.0.1/ob/api"<br>
      <br>
      # Set up the order<br>
      # must look like this:<br>
      #
{"account":"REDACTED","venue":"AIDEX","symbol":"LPEI","price":5500,"qty":25,"direction":"buy","orderType":"limit"}<br><br>
      export
order='{"account":"'$account'","venue":"'$venue'","symbol":"'$stock'","price":'$price',"qty":'$qty',"direction":"'$direction'","orderType":"'$orderType'"}'<br>export
      poststring="$base_url/venues/$venue/stocks/$stock/orders"<br>
      #export contect_type="Content-Type: application/json"<br>
      #export headers="X-Starfighter-Authorization: $apikey"<br>
      wget --no-check-certificate --header=$contect_type
      --header='X-Starfighter-Authorization: '$apikey'' --post-data=$order
      "$poststring"</code><br>
    <br>
    <br>
    That looks pretty gruesome, but it works.&nbsp; This is the result:<br>
    <br>
    <code>&nbsp;{<br>
      &nbsp; "ok": true,<br>
      &nbsp; "symbol": "LPEI",<br>
      &nbsp; "venue": "AIDEX",<br>
      &nbsp; "direction": "buy",<br>
      &nbsp; "originalQty": 100,<br>
      &nbsp; "qty": 100,<br>
      &nbsp; "price": 9000,<br>
      &nbsp; "orderType": "limit",<br>
      &nbsp; "id": 6681,<br>
      &nbsp; "account": "REDACTED",<br>
      &nbsp; "ts": "2016-01-20T14:59:11.212784703Z",<br>
      &nbsp; "fills": [],<br>
      &nbsp; "totalFilled": 0,<br>
      &nbsp; "open": true<br>
      }</code><br>
    <br>
    Don't forget to change your code or the /etc/hosts file back.<br>
    <br>
</div>
</content>

</entry>
<entry>
<title type="html">Choosing A Language</title>
<author>
<name>StarFighter</name>
</author>
<link rel="alternate" type="text/html" href="https://anomalouscowherd.github.io/archives/2016/01/16/choosing_a_language/index.html"/>

<id>https://anomalouscowherd.github.io/archives/2016/01/16/choosing_a_language/index.html</id>
<published>2016-01-16T11:44:53+01:00</published>
<updated>2016-01-16T11:44:53+01:00</updated>

<content type="xhtml">
<div xmlns="http://www.w3.org/1999/xhtml">
    <p>I'm back after a hectic holiday calendar and a bad flu.  Fortunately in
      the intervening four weeks the platform has become more stable so we
      should be able to make more progress.</p>
    <p>I just read an article about what it takes to be a stock broker at one of
      the biggest brokerage firms on wall street:<a  href="http://www.zerohedge.com/news/2016-01-14/so-you-want-be-citadel-trader-here-are-requirements"

         title="How to be a stock broker"><br />
      </a></p>
    <p><a  href="http://www.zerohedge.com/news/2016-01-14/so-you-want-be-citadel-trader-here-are-requirements"

         title="How to be a stock broker">http://www.zerohedge.com/news/2016-01-14/so-you-want-be-citadel-trader-here-are-requirements</a></p>
    <p>Note that "human" trading is not even mentioned in the posting:</p>
        <h3>  <a  href="https://www.citadel.com/careers/open-positions/quantitative-trading-systems-developer-undergraduate-masters-phd-postdoc/"

             title="Citadel Job Ad">Quantitative Trading Systems Developer:
            Undergraduate, Master’s, PhD and Postdoc (New Grads) </a></h3>
    <p><b>Location:</b> Chicago, IL</p>
    <p>Are you a natural programmer who loves to optimize and make systems more
      efficient? Do you have a sophisticated computational skillset – code
      optimization, systems architecture and library design? Do you know your
      core languages like you do your native tongue?</p>
    <p>At Citadel, Quantitative Trading System Developers are responsible for
      designing, building, and optimizing our automated trading platform.
      Developers work closely with our research, simulation and live trading
      teams.  We are seeking top undergraduate, master’s, and PhD students who
      are entrepreneurial self-starters and enjoy being in a fast-paced and
      dynamic environment for exciting opportunities in our automated
      quantitative trading businesses. This opportunity offers excellent
      exposure to a quantitative trading career path in one of the
      world’s leading global financial institutions.</p>
    <p><b>If this is what excites you: </b></p>
    <ul>
      <li>Developing core trading infrastructure</li>
      <li>Designing low-latency, high-throughput trading systems</li>
      <li>Optimizing massive parallel computing platforms.</li>
    </ul>
    <p><b>And this is what you’ve got: </b></p>
    <ul>
      <li>Advanced training in Computer Science, Computer Engineering, or other
        related fields</li>
      <li>Extensive programming experience with strong object oriented design
        skills and fluency in C, C++, or Java</li>
      <li>Expertise with algorithms and data structures</li>
      <li>Demonstrated ability to communicate complex ideas in a clear, concise
        fashion</li>
      <li>Ability to thrive in a complex, fast-paced, and highly technical
        environment</li>
    </ul>
    <p><b><i>Useful: </i></b></p>
    <ul>
      <li>Scripting languages (e.g., Linux shell, Python, Perl)</li>
      <li>Analytical packages (e.g., R, Matlab)</li>
      <li>FPGA development and high performance computing</li>
      <li>NoSQL databases (e.g., MongoDB)</li>
      <li>Distributed computing using MapReduce</li>
      <li>Multi-threaded programming</li>
      <li>Network programming</li>
    </ul>
    <br />
    <p>What caught my eye was the fact that <a  href="https://github.com/search?utf8=%E2%9C%93&q=stockfighter">not
        a single one of the 189 participants that have chosen to make their
        github repositories public</a> have decided to write in R.  R
      programming language is mature and stable and  has an active
      user community. It is listed as one of the "useful" skills in the above
      job description.  Note that the <span  style="text-decoration: underline; font-weight: bold;">required</span>
      skills are <span  style="font-weight: bold;">C</span>, <span  style="font-weight: bold;">C++</span>,
      and <span  style="font-weight: bold;">Java</span>.  Not a single one of
      the participants chose to write in C or C++ and only 13 of 189 or 6.8%
      chose to write in Java.  In addition if you write in Python ( chosen by
      15% of the participants ) you are considered to be writing in a
      "scripting" language.  This word "scripting" is a pejorative that means
      that you are not writing a "real" program.  It is somehow not as good as a
      real honest "man's" programming language. This is a slap in the face to
      all the Python, Perl and Bash programmer out there who's collective work
      holds the internet together.  The arrogance and dismissive attitude galls
      me. I have written primarily in Bash for many years and I consider my work
      to be professional and of tremendous value.  </p>
    <img  src="../images/languages.png"  alt="chart of langages used on github for stockfighter challenge"

       style="width: 800px; height: 560px;" />
    <p>One might conclude that the participants either do not wish to be hired,
      or think that their skill in other languages will be thought fungible. In
      light of the fact that the Stockfighter challenge bills itself as a job
      placement web site, I have to conclude the latter.  My experience with
      human resource departments at large institutions is that they are
      inflexible and frankly incompetent. They cannot make a determination about
      the technical skills or conversely the trainability of candidates. In
      general if you know one language it is pretty easy to pick up another one
      in a matter of weeks.  The current buzz word is "Object Orientation" and
      the job description mentions only C++ and Java as candidate OO languages.
      Given the huge academic and industry move to Java as a standard over the
      last 15 years or so I think it is a given that they are only looking for
      skill in Java and most likely specifically Hibernate + Spring + Maven or
      Java EE with all the trimmings.  These frameworks take years to learn and
      genuinely are not fungible skills. Moreover, this type of programming
      damages your brain making you incapable of writing small efficient
      programs that can, for instance, trade stocks quickly.  </p>
    <p>&Aacute; Propos of my previous discussion on the stability and maturity of
      Python; it seems to me that there is an emphasis on Time to Market in the
      brokerage business rather than maintainability. This is the same pressure
      I saw in the advertising industry where web sites are frequently made live for a
      period of a few hours and never used again.  My goal here is to write <a

         href="https://en.wikipedia.org/wiki/Functional_programming">Functional
        Programs.</a> To a considerable extent these Programming Paradigms are
      fads that come and go.  Industry has latched on to Object Orientation
      because it allows them to write spaghetti code in a maintainable way.
      Functional programming by it's very nature produces clean
      compartmentalized code without excessive loops or branches.  I write in R because it is stable and mature and above all because it is a rapid development environment. Functional
      Programming is a desirable, marketable life skill. I leave you with this
      excerpt from the Wikipedia page on <a  href="https://en.wikipedia.org/wiki/Comparison_of_programming_paradigms">Programming
        paradigms</a>:</p>
    <blockquote>
      <h3>Parallel Computing</h3><br>
<p>
      Main article: <a  title="Parallel computing"  href="https://en.wikipedia.org/wiki/Parallel_computing">Parallel
          computing</a><br><br>

        <a  title="Carnegie-Mellon University"  href="https://en.wikipedia.org/wiki/Carnegie-Mellon_University">Carnegie-Mellon
          University</a> Professor <a  title="Robert Harper (computer scientist)"

           href="https://en.wikipedia.org/wiki/Robert_Harper_%28computer_scientist%29">Robert
          Harper</a> in March 2011 wrote: "This semester Dan Licata and I are
        co-teaching a new course on <a  title="Functional programming"  href="https://en.wikipedia.org/wiki/Functional_programming">functional
          programming</a> for first-year prospective CS majors...
        Object-oriented programming is eliminated entirely from the introductory
        curriculum, because it is both anti-modular and anti-parallel by its
        very nature, and hence unsuitable for a modern CS curriculum. A proposed
        new course on object-oriented design methodology will be offered at the
        sophomore level for those students who wish to study this topic.
</p>

    </blockquote>
</div>
</content>

</entry>
<entry>
<title type="html">View From Mount Stupid</title>
<author>
<name>StarFighter</name>
</author>
<link rel="alternate" type="text/html" href="https://anomalouscowherd.github.io/archives/2015/12/21/view_from_mount_stupid/index.html"/>

<id>https://anomalouscowherd.github.io/archives/2015/12/21/view_from_mount_stupid/index.html</id>
<published>2015-12-21T21:54:32+01:00</published>
<updated>2015-12-21T21:54:32+01:00</updated>

<content type="xhtml">
<div xmlns="http://www.w3.org/1999/xhtml">
I was dealing with family issues most of yesterday and today, but I am
    still plugging away at this. <br>
    <br>
    I am now in my third day of the StockFighter challenge. two days ago you
    might recall, I managed to get the automated web browser httpie installed
    but it seems to have some problems with SSL.&nbsp; I will spend a few cycles
    resolving those issues, but for the time being I want to focus on the other
    method mentioned in the API guide using the ruby language. Ruby is an
    interesting language. It was developed in Japan and the main developers
    speak Japanese.&nbsp; Some of the discussion on the forums is exclusively in
    Japanese.&nbsp; This would not bother me if the language was in a stable
    condition, like for instance C language, but it is not.&nbsp; Ruby is in
    active development 20 years after it was released.&nbsp; Some people call
    this "remaining relevant". I call it gratuitous fluff.&nbsp; So, back to the
    challenge. The ruby program to handle the first trade is <a  href="https://starfighter.readme.io/docs/getting-started">here</a>:<br>
    <a  title="https://starfighter.readme.io/docs/getting-started"  href="https://starfighter.readme.io/docs/getting-started">https://starfighter.readme.io/docs/getting-started<br>
    </a><br>
    I decided to try it. So here goes:<br>
    <br>
    <br>
    <code>[starfighter@sl7-vm stockfighter]$ ruby first-trade.rb<br>
      /usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require':
      cannot load such file -- httparty (LoadError)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; from
      /usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require'<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; from first-trade.rb:2:in
      `&lt;main&gt;'</code><br>
    <br>
    Let's read the docs ... <br>
    <br>
    <code>[starfighter@sl7-vm stockfighter]$ sudo gem install httparty<br>
      [sudo] password for starfighter:<br>
      <br>
      Fetching: json-1.8.3.gem (100%)<br>
      Building native extensions.&nbsp; This could take a while...<br>
      ERROR:&nbsp; Error installing httparty:<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ERROR: Failed to build gem
      native extension.<br>
      <br>
      &nbsp;&nbsp;&nbsp; /usr/bin/ruby extconf.rb<br>
      mkmf.rb can't find header files for ruby at /usr/share/include/ruby.h</code><br>
    <br>
    Poo!<br>
    <br>
    <br>
    [<code>root@sl7-vm ~]# yum install ruby-devel rubygems-devel
      rubygem-net-http-persistent ruby-doc rubygem-json</code><br>
    <br>
    [snip]<br>
    <br>
    <code>Installed:<br>
      &nbsp; ruby-devel.x86_64
      0:2.0.0.598-25.el7_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      ruby-doc.noarch 0:2.0.0.598-25.el7_1<br>
      &nbsp; rubygem-net-http-persistent.noarch
      0:2.8-5.el7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      rubygems-devel.noarch 0:2.0.14-25.el7_1<br>
      <br>
      Complete!<br>
      [root@sl7-vm ~]# gem install httparty<br>
      Fetching: json-1.8.3.gem (100%)<br>
      Building native extensions.&nbsp; This could take a while...<br>
      ERROR:&nbsp; Error installing httparty:<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ERROR: Failed to build gem
      native extension.<br>
      <br>
      &nbsp;&nbsp;&nbsp; /usr/bin/ruby extconf.rb<br>
      creating Makefile<br>
      <br>
      make "DESTDIR="<br>
      gcc -I. -I/usr/include -I/usr/include/ruby/backward -I/usr/include -I.
      -DJSON_GENERATOR&nbsp;&nbsp;&nbsp; -fPIC -O2 -g -pipe -Wall
      -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong
      --param=ssp-buffer-size=4 -grecord-gcc-switches -mtune=generic -fPIC -m64
      -o generator.o -c generator.c<br>
      make: gcc: Command not found<br>
      make: *** [generator.o] Error 127</code><br>
    <br>
    Double poo! After 20 years don't you think this POS( Piece of Software )
    should be self hosting?<br>
    <br>
    <br>
    <code>[root@sl7-vm ~]# yum install gcc<br>
      Loaded plugins: langpacks<br>
      Resolving Dependencies<br>
      <br>
      Installed:<br>
      &nbsp; gcc.x86_64 0:4.8.3-9.el7<br>
      <br>
      Dependency Installed:<br>
      &nbsp; cpp.x86_64
      0:4.8.3-9.el7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      glibc-devel.x86_64 0:2.17-78.el7 glibc-headers.x86_64 0:2.17-78.el7<br>
      &nbsp; kernel-headers.x86_64 0:3.10.0-229.20.1.el7 libmpc.x86_64
      0:1.0.1-3.el7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mpfr.x86_64 0:3.1.1-4.el7<br>
      <br>
      Complete!<br>
      [root@sl7-vm ~]# gem install httparty<br>
      Building native extensions.&nbsp; This could take a while...<br>
      Successfully installed json-1.8.3<br>
      Fetching: multi_xml-0.5.5.gem (100%)<br>
      Successfully installed multi_xml-0.5.5<br>
      Fetching: httparty-0.13.7.gem (100%)<br>
      <span  style="font-weight: bold; color: rgb(255, 0, 0);">When you
        HTTParty, you must party hard!</span><br>
      Successfully installed httparty-0.13.7<br>
      Parsing documentation for json-1.8.3<br>
      Installing ri documentation for json-1.8.3<br>
      Parsing documentation for multi_xml-0.5.5<br>
      Installing ri documentation for multi_xml-0.5.5<br>
      Parsing documentation for httparty-0.13.7<br>
      Installing ri documentation for httparty-0.13.7</code><br>
    <br>
    Whee!!!!&nbsp; Now we can party!<br>
    <br>
    <code>[starfighter@sl7-vm stockfighter]$ ruby first-trade.rb<br>
      {<br>
      &nbsp; "ok": true,<br>
      &nbsp; "symbol": "RKI",<br>
      &nbsp; "venue": "YLMEX",<br>
      &nbsp; "direction": "buy",<br>
      &nbsp; "originalQty": 25,<br>
      &nbsp; "qty": 25,<br>
      &nbsp; "price": 8700,<br>
      &nbsp; "orderType": "limit",<br>
      &nbsp; "id": 5157,<br>
      &nbsp; "account": "&lt;redacted&gt;",<br>
      &nbsp; "ts": "2015-12-20T18:52:29.266964823Z",<br>
      &nbsp; "fills": [],<br>
      &nbsp; "totalFilled": 0,<br>
      &nbsp; "open": true<br>
      }</code><br>
    <br>
    So I'm making progress.&nbsp; I'm wondering how many people will choose to
    fight this octopus to get to the stage of being able to launch an
    order.&nbsp; I feel like I am junking up my machine and introducing security
    holes so I can run some idiosyncratic garbage that will be replaced in a few
    days.&nbsp; That is not a exaggeration. Ruby 2.2.4 was released Dec. 16,
    2015.&nbsp; You can bet that most of those "gems" will need to be re-written
    to cope.&nbsp; The last version of C was released in 2011.&nbsp; If you
    where a C programmer you might not have noticed.&nbsp; The C language is
    standardized ( via ANSI in 1989 or ISO in 1990 ).&nbsp; Your programs would
    continue to work without rewrites.<br>
    <br>
    I read an article yesterday about <a  href="http://www.zerohedge.com/news/2015-12-19/2015-year-review-scenic-vistas-mount-stupid">Mount
      Stupid</a>:<br>
    <img  alt="mount stupid"  src="../images/mount-stupid.jpg"><br>
    <br>
    The premise is that people that know nothing about a subject will broadcast
    their ignorance to the world.&nbsp; So I am just climbing the front side of
    Mount Stupid right now.&nbsp; I expect the decent to be a long trip so you
    can expect to hear from me for a long time. <br>
    <br>
</div>
</content>

</entry>
<entry>
<title type="html">First Day and First Level</title>
<author>
<name>StarFighter</name>
</author>
<link rel="alternate" type="text/html" href="https://anomalouscowherd.github.io/archives/2015/12/20/first_day_and_first_level/index.html"/>

<id>https://anomalouscowherd.github.io/archives/2015/12/20/first_day_and_first_level/index.html</id>
<published>2015-12-20T01:53:57+01:00</published>
<updated>2015-12-20T01:53:57+01:00</updated>

<content type="xhtml">
<div xmlns="http://www.w3.org/1999/xhtml">
          <p>If you are making a game about programming, it seems to me that you
            should make it as accessible as possible.  This is not a rant.  I
            know next to nothing about programming and if someone introduces me
            to a new tool I don't reject it out of hand. However the very first
            level introduces me to the StockFighter API with this text:</p>
          <p><a  ng-click="choose($index)"  href="https://starfighter.readme.io/docs/place-new-order"><span

                 ng-if="!tab.status"  class="ng-scope ng-binding">Shell </span>
            </a> </p>
          <div  ng-show="$index==current"  ng-repeat="tab in data.codes track by $id($index)"

             class="ng-scope">
            <pre  data-mode="shell"  class="cm-s-neo"  ng-if="data.codes[$index].code != &quot;&quot;"

 style="height: 582px;"><span  class="cm-comment"># Let's try something different this time.  Sure, you could interact with the API</span>
<span  class="cm-comment"># in an actual programming language, but let me introduce you to httpie, a very</span>
<span  class="cm-comment"># cool tool.</span>

<span  class="cm-comment"># httpie is like curl, except much nicer to use.  See: https://github.com/jkbrzt/httpie</span>

<span  class="cm-comment"># You can install it via: </span>
<span  class="cm-comment"># brew install httpie</span>
<span  class="cm-comment"># apt-get install httpie</span>
<span  class="cm-comment"># yum install httpie</span>

<span  class="cm-comment"># We'll start by creating a file representing our JSON request, like:</span>

<span  class="cm-def">$ nano</span> /tmp/order.json

<span  class="cm-comment"># Copy/paste in:</span>

{
  <span  class="cm-string">"account"</span>: <span  class="cm-string">"MST92145671"</span>,
  <span  class="cm-string">"venue"</span>: <span  class="cm-string">"LOBHEX"</span>,
  <span  class="cm-string">"stock"</span>: <span  class="cm-string">"LPEI"</span>,
  <span  class="cm-string">"qty"</span>: <span  class="cm-number">100</span>,
  <span  class="cm-string">"direction"</span>: <span  class="cm-string">"buy"</span>,
  <span  class="cm-string">"orderType"</span>: <span  class="cm-string">"market"</span> 
}

<span  class="cm-comment"># Got that ready?  Great, here's httpie magic:</span>

<span  class="cm-def">$ http</span> POST https://api.stockfighter.io/ob/api/venues/LOBHEX/stocks/LPEI/orders <span

 class="cm-string">'X-Starfighter-Authorization:copy-and-paste-your-API-key-here'</span> &lt; /tmp/order.json

<span  class="cm-comment"># Now isn't that so much nicer than curl?</span>
<span  class="cm-comment"># No unnecessary headers (the Accept: application/json is implict.)</span>
<span  class="cm-comment"># You can inspect the requests quickly, with syntax highlighting.</span>

<span  class="cm-comment"># This is frequently useful when you're exploring a novel API.  Try it out!</span>
<span  class="cm-comment"># Most developers, after they get a handle on the endpoints, will want to</span>
<span  class="cm-comment"># write a more robust program in their language of choice, but httpie is</span>
<span  class="cm-comment"># a good choice for interactive programming when you want to figure out</span>
<span  class="cm-comment"># exactly what is happening when e.g. a library isn't working as expected.<br /><br /></span> </pre></div>
          <p><br /></p><p>Cool Right?   I just put together a new virtual machine and got this blog software working.  Now I want to try this API thingy so lets Fire up that httpie and see what happens!</p><p><code>[root@sl7-vm ~]# yum install httpie<br />Loaded plugins: langpacks<br />No package httpie available.<br />Error: Nothing to do</code></p>
          <p>So I'm not easily dissuaded.  I check out the web site <a  href="https://github.com/jkbrzt/httpie"

 title="HTTPIE cURL type program">here.</a></p>
          <p>It says you can use something called "pip" if your favorite yum repo doesn't happen to have hippie in it. Let's try that:</p><p><code>[root@sl7-vm ~]# pip<br />-bash: pip: command not found</code></p><p>Hummm....</p><p><code>[root@sl7-vm ~]# easy_install pip<br />Searching for pip<br />Reading https://pypi.python.org/simple/pip/<br />Best match: pip 7.1.2<br />Downloading https://pypi.python.org/packages/source/p/pip/pip-7.1.2.tar.gz#md5=3823d2343d9f3aaab21cf9c917710196<br />Processing pip-7.1.2.tar.gz<br />Writing /tmp/easy_install-jC2noC/pip-7.1.2/setup.cfg<br />Running pip-7.1.2/setup.py -q bdist_egg --dist-dir /tmp/easy_install-jC2noC/pip-7.1.2/egg-dist-tmp-tBPFxY<br />warning: no previously-included files found matching '.coveragerc'<br />warning: no previously-included files found matching '.mailmap'<br />warning: no previously-included files found matching '.travis.yml'<br />warning: no previously-included files found matching 'pip/_vendor/Makefile'<br />warning: no previously-included files found matching 'tox.ini'<br />warning: no previously-included files found matching 'dev-requirements.txt'<br />no previously-included directories found matching '.travis'<br />no previously-included directories found matching 'docs/_build'<br />no previously-included directories found matching 'contrib'<br />no previously-included directories found matching 'tasks'<br />no previously-included directories found matching 'tests'<br />Adding pip 7.1.2 to easy-install.pth file<br />Installing pip script to /usr/bin<br />Installing pip2.7 script to /usr/bin<br />Installing pip2 script to /usr/bin<br /><br />Installed /usr/lib/python2.7/site-packages/pip-7.1.2-py2.7.egg<br />Processing dependencies for pip<br />Finished processing dependencies for pip<br /></code></p><p><code>[root@sl7-vm ~]# pip install --upgrade pip setuptools<br />/usr/lib/python2.7/site-packages/pip-7.1.2-py2.7.egg/pip/_vendor/requests/packages/urllib3/util/ssl_.py:90: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.<br />  InsecurePlatformWarning<br />Requirement already up-to-date: pip in /usr/lib/python2.7/site-packages/pip-7.1.2-py2.7.egg<br />Collecting setuptools<br />  Downloading setuptools-19.1.1-py2.py3-none-any.whl (463kB)<br />    100% |████████████████████████████████| 466kB 330kB/s<br />Installing collected packages: setuptools<br />  Found existing installation: setuptools 0.9.8<br />    Uninstalling setuptools-0.9.8:<br />      Successfully uninstalled setuptools-0.9.8<br />Successfully installed setuptools-19.1.1<br />/usr/lib/python2.7/site-packages/pip-7.1.2-py2.7.egg/pip/_vendor/requests/packages/urllib3/util/ssl_.py:90: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.<br />  InsecurePlatformWarning<br /></code></p><p><code>[root@sl7-vm ~]# pip install --upgrade httpie<br />Collecting httpie<br />/usr/lib/python2.7/site-packages/pip-7.1.2-py2.7.egg/pip/_vendor/requests/packages/urllib3/util/ssl_.py:90: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.<br />  InsecurePlatformWarning<br />  Downloading httpie-0.9.2-py2.py3-none-any.whl (66kB)<br />    100% |████████████████████████████████| 69kB 556kB/s<br />Collecting requests>=2.3.0 (from httpie)<br />  Downloading requests-2.9.0-py2.py3-none-any.whl (500kB)<br />    100% |████████████████████████████████| 503kB 235kB/s<br />Collecting Pygments>=1.5 (from httpie)<br />  Downloading Pygments-2.0.2-py2-none-any.whl (672kB)<br />    100% |████████████████████████████████| 675kB 464kB/s<br />Installing collected packages: requests, Pygments, httpie<br />Successfully installed Pygments-2.0.2 httpie-0.9.2 requests-2.9.0<br />[root@sl7-vm ~]#</code></p><p><br /></p><p>So what happened there?  It looks to me like I just installed a package outside of the rpm database.  In general I try to avoid doing that.  It can lead to a situation known as "Dependency Hell".  This was why the yum system was introduced.  The intention was to avoid having to install packages from source.  You will note that the pip package and the httpie package spray files all over the place.  In addition this new POS ( Piece of Software) has introduced a security vulnerability into my relatively clean box.  It is a pretty minor one, but it is not simple to fix.  I am running <a

 href="https://www.scientificlinux.org/"  title="Scientific Linux">Scientific Linux</a>, a RedHat derivative. This is important because RedHat uses python for all of it's system software. Leaving aside for the moment advisability of writing crucial system software in an interpreted language, lets look at this security issue . The message I get when I try to install httpie says this:</p><p><code>InsecurePlatformWarning: A true SSLContext object is not 
available. This prevents urllib3 from configuring SSL appropriately and 
may cause certain SSL connections to fail. For more information, see 
<a  href="https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning"

 title="insecure platform warning"><span  style="font-weight: bold; text-decoration: underline;">https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning</span></a>.</code></p>
          <p>The linked page tells me that my version of python needs a tweak (or three) to handle HTTPS requests. The recommended fix is to "upgrade" python to version 2.7.9 ( am running Python 2.7.5 ).  I downloaded this OS today.  It still has that new car smell. I will not "upgrade" python.  </p><p><br /></p><p>Long story short, This is a crappy tool.  Why didn't you show an example using the tools that come with the OS?  In my case that includes wget, cURL and ... what else? elinks maybe? There is another example on the page that uses ruby.  I will write about that next time.</p><p>-StarFighter</p><p><br /></p>
</div>
</content>

</entry>
<entry>
<title type="html">Stockfighter blog by StarFighter</title>
<author>
<name>StarFighter</name>
</author>
<link rel="alternate" type="text/html" href="https://anomalouscowherd.github.io/archives/2015/12/19/stockfighter_blog_by_starfighter/index.html"/>

<id>https://anomalouscowherd.github.io/archives/2015/12/19/stockfighter_blog_by_starfighter/index.html</id>
<published>2015-12-19T15:21:10+01:00</published>
<updated>2015-12-19T15:21:10+01:00</updated>
<category term="stockfighter" />
<content type="xhtml">
<div xmlns="http://www.w3.org/1999/xhtml">
 <p>This is my blog about the StockFighter on-line programming
      challenge. <a  title="StockFighter online stocktrading/programming game."

         href="https://www.stockfighter.io/">Stockfighter</a> is an online
      programming "game" that requires you to write an automated trading system
      ( or several of them ).&nbsp; This will be a difficult assignment, so I am
      writing this blog to serve as a quick reference and to motivate myself to
      complete the challenge.&nbsp; The blog will almost certainly contain
      spoilers so don't read it if you want to find the answers yourself.&nbsp;
      My technique will evolve as I go along so I don't know what language I
      will write in or what systems I will use.&nbsp; The only thing I am sure
      of is that I do not wish to use any hints or assistance.&nbsp; I have
      almost no experience in programming or stock markets so this will be a
      real education.&nbsp; I expect that it will take me a long time to
      finish.&nbsp; I hope that I will not be the last one to finish the
      challenge, but if I am the last one, then I will become "The Last
      StarFighter" ;-)</p>
    <p><br>
    </p>
    <b>Shalom Aleikhem</b>,<br>
    StarFighter
</div>
</content>

</entry>

</feed>
